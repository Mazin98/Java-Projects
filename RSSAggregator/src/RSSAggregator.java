import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Mazin Tagelsir
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //used getchild method to get title tag
        int indexOfTitle = getChildElement(channel, "title");

        //default value
        String title = "No Title";

        //if there is a title tag
        if (channel.child(indexOfTitle).numberOfChildren() != 0) {
            title = channel.child(indexOfTitle).child(0).label();
        }

        // no need to check this because link is required child of channel tag
        int indexOfLink = getChildElement(channel, "link");
        String link = channel.child(indexOfLink).child(0).label();

        //gets index of description
        int indexOfDescription = getChildElement(channel, "description");

        //sets description to nothing
        String description = "No description";

        //if there is a desc. - sets description to description tag
        if (channel.child(indexOfDescription).numberOfChildren() != 0) {
            description = channel.child(indexOfDescription).child(0).label();
        }

//        // no need to check this because link is required child of channel tag
//        int indexOfLink = getChildElement(channel, "link");
//        String link = channel.child(indexOfLink).child(0).label();

        //prints title tag in the html doc
        out.println("<html> <head> <title>" + title + "</title>");
        out.println("</head> <body>");

        //for the link in the html on the title
        out.println("<h1> <a href = \"" + link + "\">" + title + "</a></h1>");

        //prints the description as a p tag
        out.println("<p>");
        out.println(description);
        out.println("</p>");

        out.println("<table border=\"1\">");

        //print out the date,source,and news at top of table
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        //node can't be less than zero (edge)
        int node = -1;

        for (int i = 0; i < xml.numberOfChildren(); i++) {
            if (xml.child(i).isTag()) {

                //if the child is equal to the name of the desired tag
                if (xml.child(i).label().equals(tag)) {

                    //node will be equal to the child index
                    node = i;
                }
            }
        }
        return node;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

//        String sourceURL = "";
//        int pubDateIndex = getChildElement(item, "pubDate");
//        int sourceIndex = getChildElement(item, "source");
//        int titleIndex = getChildElement(item, "title");
//        int descriptionIndex = getChildElement(item, "description");

        String sourceURL = ""; //empty to start
        int indexOfpubDate = getChildElement(item, "pubDate");
        int indexOfSource = getChildElement(item, "source");
        int indexOfTitle = getChildElement(item, "title");

        //default pub date
        String pubDate = "No Date Available";

        //if there is a child for the index
        if (indexOfpubDate != -1
                && item.child(indexOfpubDate).numberOfChildren() != 0) {

            //the publication date is the label of that index tag
            pubDate = item.child(indexOfpubDate).child(0).label();
        }

        //default string until made
        String sourceText = "No source available";

        if (indexOfSource != -1
                && item.child(indexOfSource).numberOfChildren() != 0) {

            //declares url to the attribute of the source tag(the url)
            sourceURL = item.child(indexOfSource).attributeValue("url");

            ////declares the text to the label of the source tag
            sourceText = item.child(indexOfSource).child(0).label();

        }

        int linkIndex = getChildElement(item, "link");
        String link = item.child(linkIndex).child(0).label();

        //default title string text
        String title = "No Title available";
        if (indexOfTitle != -1
                && item.child(indexOfTitle).numberOfChildren() != 0) {

            title = item.child(indexOfTitle).child(0).label();
        }

        //html doc output:
        out.println("<tr>");
        out.println("<td>" + pubDate + "</td>"); // date cell
        out.println("<td>" + "<a href = \"" + sourceURL + "\">" + sourceText
                + "</a></td>"); // link cell
        out.println("<td><a href = \"" + link + "\">" + title + "</a></td>");

        out.println("</tr>");

    }

    /**
     * Repeatedly calls processItem() to display the table a the HTML file.
     *
     * @param outputFile
     *            the output stream
     * @param channel
     *            channel tag that contains items
     *
     * @updates out.content
     * @requires out.is_open && channel.isTag()
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void outputHTMLTable(XMLTree channel,
            SimpleWriter outputFile) {
        for (int i = 0; i < channel.numberOfChildren(); i++) {
            if (channel.child(i).label().equals("item")) {
                processItem(channel.child(i), outputFile);
            }
        }
    }

//    /**
//     * Checks if rss url is valid.
//     *
//     * @param tree
//     *            the tree
//     * @return valid
//     *
//     *---------------THIS METHOD WAS FROM THE RSSREADER PROJECT
//     *
//     */
//    private static boolean isValid(XMLTree tree) {
//        boolean valid = false; //declare boolean
//
//        //if there is a tag and it has "rss", & "version"
//        if (tree.isTag() && tree.label().equals("rss")
//                && tree.hasAttribute("version")) {
//
//            //if version is 2.0
//            if (tree.attributeValue("version").equals("2.0")) {
//                valid = true; //convert the boolean
//            }
//        }
//
//        return valid; //return the value
//    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {

        XMLTree tree = new XMLTree1(url);

        outputHeader(tree.child(0), out); // passed child 0 to get <channel> tag
        outputHTMLTable(tree.child(0), out); //passed to get 1st child
        outputFooter(out);
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        //prompts user for news feed
        out.println(
                "Enter the name of an XML file with a list of URLs for RSS 2.0 feeds");
        String inputFile = in.nextLine();

        //ensures that that input is a xml feed
        while (!inputFile.endsWith(".xml")) { // makes sure html extension is present
            out.print("file name must end with .xml extension. Try again");
            inputFile = in.nextLine();
        }

        //feed is the xml string
        XMLTree feed = new XMLTree1(inputFile);

        out.println("Enter the name of the output file with .html extension: ");
        String fileName = in.nextLine();

        //this loop makes sire the html is present
        while (!fileName.endsWith(".html")) { // makes sure html extension is present
            out.print("file name must end with .html extension. Try again");
            fileName = in.nextLine();
        }

        SimpleWriter indexFile = new SimpleWriter1L(fileName); // main output file
        String indexTitle = feed.attributeValue("title");

        indexFile.println(
                "<html><head><title>" + indexTitle + "</title></head>");
        indexFile.println("<body><h2>" + indexTitle + "</h2>");
        indexFile.println("<ul>");

        /*
         * Loop to get the links to each of the feeds in the xml file declares
         * each of the variables to its appropriate child. currentfile is
         * declared to make a html file for the feed.
         */
        for (int i = 0; i < feed.numberOfChildren(); i++) {
            //gets feed to start application of the variables
            if (feed.child(i).label().equals("feed")) {

                //declared here - doesn't matter to be declared outside of the loop
                String url = feed.child(i).attributeValue("url");
                String name = feed.child(i).attributeValue("name");
                String htmlFile = feed.child(i).attributeValue("file");

                //simplewriter for the feed
                SimpleWriter currentFile = new SimpleWriter1L(htmlFile);

                //prints the title to the html file
                indexFile.println("<li><a href = \"" + htmlFile + "\">" + name
                        + "</a></li>");

                //calls processfeed method to apply the new url for home file
                processFeed(url, htmlFile, currentFile);

            }

        }
        indexFile.println("</ul>");
        indexFile.println("</body><html>");

        //closing
        in.close();
        out.close();
        indexFile.close();
    }

}
